// Code generated by MockGen. DO NOT EDIT.
// Source: handler/oauth_handler.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	model "github.com/choobot/choo-pos-backend/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOAuthHandler is a mock of OAuthHandler interface.
type MockOAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthHandlerMockRecorder
}

// MockOAuthHandlerMockRecorder is the mock recorder for MockOAuthHandler.
type MockOAuthHandlerMockRecorder struct {
	mock *MockOAuthHandler
}

// NewMockOAuthHandler creates a new mock instance.
func NewMockOAuthHandler(ctrl *gomock.Controller) *MockOAuthHandler {
	mock := &MockOAuthHandler{ctrl: ctrl}
	mock.recorder = &MockOAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthHandler) EXPECT() *MockOAuthHandlerMockRecorder {
	return m.recorder
}

// GenerateOAuthState mocks base method.
func (m *MockOAuthHandler) GenerateOAuthState(callback string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateOAuthState", callback)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateOAuthState indicates an expected call of GenerateOAuthState.
func (mr *MockOAuthHandlerMockRecorder) GenerateOAuthState(callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateOAuthState", reflect.TypeOf((*MockOAuthHandler)(nil).GenerateOAuthState), callback)
}

// GenerateAuthCodeURL mocks base method.
func (m *MockOAuthHandler) GenerateAuthCodeURL(callback string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthCodeURL", callback)
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateAuthCodeURL indicates an expected call of GenerateAuthCodeURL.
func (mr *MockOAuthHandlerMockRecorder) GenerateAuthCodeURL(callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthCodeURL", reflect.TypeOf((*MockOAuthHandler)(nil).GenerateAuthCodeURL), callback)
}

// ExchangeToken mocks base method.
func (m *MockOAuthHandler) ExchangeToken(code string) (string, string, *model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeToken", code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*model.User)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ExchangeToken indicates an expected call of ExchangeToken.
func (mr *MockOAuthHandlerMockRecorder) ExchangeToken(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeToken", reflect.TypeOf((*MockOAuthHandler)(nil).ExchangeToken), code)
}

// Verify mocks base method.
func (m *MockOAuthHandler) Verify(idToken string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", idToken)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockOAuthHandlerMockRecorder) Verify(idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockOAuthHandler)(nil).Verify), idToken)
}

// Signout mocks base method.
func (m *MockOAuthHandler) Signout(oauthToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signout", oauthToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signout indicates an expected call of Signout.
func (mr *MockOAuthHandlerMockRecorder) Signout(oauthToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signout", reflect.TypeOf((*MockOAuthHandler)(nil).Signout), oauthToken)
}
