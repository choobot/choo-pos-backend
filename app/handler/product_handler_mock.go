// Code generated by MockGen. DO NOT EDIT.
// Source: handler/product_handler.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	model "github.com/choobot/choo-pos-backend/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockProductHandler is a mock of ProductHandler interface.
type MockProductHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProductHandlerMockRecorder
}

// MockProductHandlerMockRecorder is the mock recorder for MockProductHandler.
type MockProductHandlerMockRecorder struct {
	mock *MockProductHandler
}

// NewMockProductHandler creates a new mock instance.
func NewMockProductHandler(ctrl *gomock.Controller) *MockProductHandler {
	mock := &MockProductHandler{ctrl: ctrl}
	mock.recorder = &MockProductHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductHandler) EXPECT() *MockProductHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProductHandler) Create(product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProductHandlerMockRecorder) Create(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductHandler)(nil).Create), product)
}

// GetAll mocks base method.
func (m *MockProductHandler) GetAll() ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockProductHandlerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockProductHandler)(nil).GetAll))
}

// GetByIds mocks base method.
func (m *MockProductHandler) GetByIds(ids []interface{}) (map[string]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", ids)
	ret0, _ := ret[0].(map[string]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockProductHandlerMockRecorder) GetByIds(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockProductHandler)(nil).GetByIds), ids)
}
