// Code generated by MockGen. DO NOT EDIT.
// Source: handler/promotion_handler.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	model "github.com/choobot/choo-pos-backend/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPromotionHandler is a mock of PromotionHandler interface.
type MockPromotionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPromotionHandlerMockRecorder
}

// MockPromotionHandlerMockRecorder is the mock recorder for MockPromotionHandler.
type MockPromotionHandlerMockRecorder struct {
	mock *MockPromotionHandler
}

// NewMockPromotionHandler creates a new mock instance.
func NewMockPromotionHandler(ctrl *gomock.Controller) *MockPromotionHandler {
	mock := &MockPromotionHandler{ctrl: ctrl}
	mock.recorder = &MockPromotionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromotionHandler) EXPECT() *MockPromotionHandlerMockRecorder {
	return m.recorder
}

// CalculateDiscount mocks base method.
func (m *MockPromotionHandler) CalculateDiscount(order *model.Order, productsMap map[string]model.Product) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateDiscount", order, productsMap)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateDiscount indicates an expected call of CalculateDiscount.
func (mr *MockPromotionHandlerMockRecorder) CalculateDiscount(order, productsMap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateDiscount", reflect.TypeOf((*MockPromotionHandler)(nil).CalculateDiscount), order, productsMap)
}
