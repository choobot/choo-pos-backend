// Code generated by MockGen. DO NOT EDIT.
// Source: handler/user_handler.go

// Package handler is a generated GoMock package.
package handler

import (
	reflect "reflect"

	model "github.com/choobot/choo-pos-backend/app/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// CreateLog mocks base method.
func (m *MockUserHandler) CreateLog(user model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLog", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLog indicates an expected call of CreateLog.
func (mr *MockUserHandlerMockRecorder) CreateLog(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLog", reflect.TypeOf((*MockUserHandler)(nil).CreateLog), user)
}

// GetAllLog mocks base method.
func (m *MockUserHandler) GetAllLog() ([]model.UserLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLog")
	ret0, _ := ret[0].([]model.UserLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLog indicates an expected call of GetAllLog.
func (mr *MockUserHandlerMockRecorder) GetAllLog() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLog", reflect.TypeOf((*MockUserHandler)(nil).GetAllLog))
}
